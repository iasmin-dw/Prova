<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="utf-8" />
  <title>RelÃ³gio Pink ðŸ’•</title>
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <style>
    :root{
      --pink-strong:#ff1493;
      --pink-light:#ff69b4;
      --bg:#fff0f5;
      --card:#ffe4f2;
      --text:#4b004b;
    }
    html,body{height:100%;margin:0;font-family:Inter, Arial, sans-serif;background:var(--bg);display:flex;align-items:center;justify-content:center}
    .card{
      background:var(--card);
      border:2px solid var(--pink-strong);
      padding:22px 28px;
      border-radius:14px;
      text-align:center;
      box-shadow:0 8px 20px rgba(0,0,0,0.08);
      min-width:250px;
    }
    .title{font-size:18px;color:var(--pink-strong);margin:0 0 8px 0}
    .clock{
      font-size:20px;
      color:var(--pink-strong);
      font-weight:700;
      margin:6px 0;
      letter-spacing:0.4px;
    }
    .sub{
      font-size:13px;color:var(--text);opacity:0.9;margin-top:6px;
    }
    .small{
      font-size:12px;color:var(--pink-light);margin-top:8px;
    }

    /* responsivo */
    @media (max-width:420px){
      .card{padding:16px;border-radius:10px}
      .clock{font-size:18px}
    }
  </style>
</head>
<body>
  <div class="card" role="region" aria-label="RelÃ³gio em tempo real">
    <h1 class="title">ðŸ•’ RelÃ³gio em tempo real ðŸ’•</h1>
    <div id="clock" class="clock" aria-live="polite">Carregando hora...</div>
    <div id="tz" class="sub"></div>
    <div class="small">Atualiza a cada segundo â€” testado em vÃ¡rios navegadores</div>
  </div>

  <script>
    // FunÃ§Ã£o que formata data/hora de forma robusta (usa Intl quando disponÃ­vel)
    function formatDateTime(date) {
      try {
        // Formato local com dia/mÃªs/ano e hora:min:seg
        const opts = {
          day: "2-digit",
          month: "2-digit",
          year: "numeric",
          hour: "2-digit",
          minute: "2-digit",
          second: "2-digit",
          hour12: false
        };
        return new Intl.DateTimeFormat(navigator.language || "pt-BR", opts).format(date);
      } catch (e) {
        // fallback simples
        const pad = n => String(n).padStart(2,"0");
        return `${pad(date.getDate())}/${pad(date.getMonth()+1)}/${date.getFullYear()} ${pad(date.getHours())}:${pad(date.getMinutes())}:${pad(date.getSeconds())}`;
      }
    }

    // Atualiza relÃ³gio no DOM
    const elClock = document.getElementById("clock");
    const elTz = document.getElementById("tz");

    function updateClock(){
      const now = new Date();
      elClock.textContent = formatDateTime(now) + " ðŸ’•";
      // mostrar timezone curto (ex: GMT-3) e nome opcional
      try {
        const tzShort = now.toString().match(/\([^)]+\)$/);
        const zoneName = Intl.DateTimeFormat().resolvedOptions().timeZone || "";
        elTz.textContent = (tzShort ? tzShort[0].replace(/[()]/g,"") : "") + (zoneName ? " â€” " + zoneName : "");
      } catch(e) {
        elTz.textContent = "";
      }
    }

    // primeira atualizaÃ§Ã£o imediata e depois a cada 1s
    updateClock();
    const timerId = setInterval(updateClock, 1000);

    // limpa o timer se a pÃ¡gina for descarregada (boa prÃ¡tica)
    window.addEventListener("beforeunload", () => clearInterval(timerId));
  </script>
</body>
</html>
